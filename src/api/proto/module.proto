syntax = "proto3";

package call_assistant.module;

option go_package = "github.com/shocklateboy92/call-assistant/src/api/proto/module";

import "common.proto";
import "entities.proto";

// ModuleService is implemented by each module to handle lifecycle management
service ModuleService {
  // HealthCheck is called periodically by the orchestrator to monitor module health
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
  
  // Shutdown is called to gracefully stop the module
  rpc Shutdown(ShutdownRequest) returns (ShutdownResponse);
  
  // Entity queries
  rpc GetEntityStatus(call_assistant.entities.GetEntityStatusRequest) returns (call_assistant.entities.GetEntityStatusResponse);
  rpc ListEntities(call_assistant.entities.ListEntitiesRequest) returns (call_assistant.entities.ListEntitiesResponse);
}


// PipelineService is implemented by each module to handle pipeline operations
service PipelineService {
  // Connect entities within this module's domain
  rpc ConnectEntities(ConnectEntitiesRequest) returns (ConnectEntitiesResponse);
  
  // Disconnect entities
  rpc DisconnectEntities(DisconnectEntitiesRequest) returns (DisconnectEntitiesResponse);
  
  // Start media flow
  rpc StartFlow(StartFlowRequest) returns (StartFlowResponse);
  
  // Stop media flow
  rpc StopFlow(StopFlowRequest) returns (StopFlowResponse);
  
  // Get flow status
  rpc GetFlowStatus(GetFlowStatusRequest) returns (GetFlowStatusResponse);
}



// Health check messages
message HealthCheckRequest {
  // Empty for now, could include health check parameters in the future
}

message HealthCheckResponse {
  call_assistant.common.ModuleStatus status = 1;
}

// Configuration messages
message ConfigureRequest {
  map<string, string> config = 1;
}

message ConfigureResponse {
  bool success = 1;
  string error_message = 2;
  call_assistant.common.ModuleStatus status = 3;
}

// Shutdown messages
message ShutdownRequest {
  bool force = 1; // If true, module should shut down immediately
  int32 timeout_seconds = 2; // How long to wait for graceful shutdown
}

message ShutdownResponse {
  // If error_message is not set, shutdown was successful
  optional string error_message = 2;
}

// Pipeline operation messages
message ConnectEntitiesRequest {
  string source_entity_id = 1;
  string target_entity_id = 2;
  call_assistant.entities.MediaType media_type = 3;
  call_assistant.entities.QualityProfile quality = 4;
  map<string, string> connection_config = 5;
}

message ConnectEntitiesResponse {
  bool success = 1;
  string error_message = 2;
  call_assistant.entities.Connection connection = 3;
}

message DisconnectEntitiesRequest {
  string connection_id = 1;
  bool force = 2;
}

message DisconnectEntitiesResponse {
  bool success = 1;
  string error_message = 2;
}

message StartFlowRequest {
  string connection_id = 1;
  map<string, string> runtime_config = 2;
}

message StartFlowResponse {
  bool success = 1;
  string error_message = 2;
  call_assistant.entities.ConnectionStatus status = 3;
}

message StopFlowRequest {
  string connection_id = 1;
  bool force = 2;
}

message StopFlowResponse {
  bool success = 1;
  string error_message = 2;
  call_assistant.entities.ConnectionStatus status = 3;
}

message GetFlowStatusRequest {
  string connection_id = 1;
}

message GetFlowStatusResponse {
  bool success = 1;
  string error_message = 2;
  call_assistant.entities.Connection connection = 3;
}



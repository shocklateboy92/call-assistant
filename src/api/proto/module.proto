syntax = "proto3";

package call_assistant.module;

option go_package = "github.com/shocklateboy92/call-assistant/src/api/proto/module";

import "common.proto";
import "events.proto";

// ModuleService is implemented by each module to handle lifecycle management
service ModuleService {
  // HealthCheck is called periodically by the orchestrator to monitor module health
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
  
  // Shutdown is called to gracefully stop the module
  rpc Shutdown(ShutdownRequest) returns (ShutdownResponse);
}

// EventService is implemented by the orchestrator to receive events from modules
service EventService {
  // ReportEvent is called by modules to send events to the orchestrator
  rpc ReportEvent(ReportEventRequest) returns (ReportEventResponse);
  
  // ReportStatus is called by modules to send status updates
  rpc ReportStatus(ReportStatusRequest) returns (ReportStatusResponse);
  
  // ReportMetrics is called by modules to send performance metrics
  rpc ReportMetrics(ReportMetricsRequest) returns (ReportMetricsResponse);
}


// Health check messages
message HealthCheckRequest {
  // Empty for now, could include health check parameters in the future
}

message HealthCheckResponse {
  call_assistant.common.ModuleStatus status = 1;
}

// Configuration messages
message ConfigureRequest {
  map<string, string> config = 1;
}

message ConfigureResponse {
  bool success = 1;
  string error_message = 2;
  call_assistant.common.ModuleStatus status = 3;
}

// Shutdown messages
message ShutdownRequest {
  bool force = 1; // If true, module should shut down immediately
  int32 timeout_seconds = 2; // How long to wait for graceful shutdown
}

message ShutdownResponse {
  bool success = 1;
  string error_message = 2;
}


// Event reporting messages
message ReportEventRequest {
  call_assistant.events.Event event = 1;
}

message ReportEventResponse {
  bool success = 1;
  string error_message = 2;
}

message ReportStatusRequest {
  call_assistant.common.StatusUpdate status_update = 1;
}

message ReportStatusResponse {
  bool success = 1;
  string error_message = 2;
}

message ReportMetricsRequest {
  call_assistant.common.Metrics metrics = 1;
}

message ReportMetricsResponse {
  bool success = 1;
  string error_message = 2;
}
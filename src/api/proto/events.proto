syntax = "proto3";

package call_assistant.events;

option go_package = "github.com/shocklateboy92/call-assistant/src/api/proto/events";

import "common.proto";
import "google/protobuf/timestamp.proto";

enum EventSeverity {
  EVENT_SEVERITY_UNSPECIFIED = 0;
  EVENT_SEVERITY_INFO = 10;
  EVENT_SEVERITY_WARNING = 20;
  EVENT_SEVERITY_ERROR = 30;
  EVENT_SEVERITY_CRITICAL = 40;
}

message Event {
  string id = 1;
  EventSeverity severity = 2;
  string source_module_id = 3;
  google.protobuf.Timestamp timestamp = 4;
  
  oneof event_data {
    ModuleStartedEvent module_started = 10;
    ModuleStoppedEvent module_stopped = 11;
    ModuleErrorEvent module_error = 12;
    ModuleConfiguredEvent module_configured = 13;
    ModuleHealthChangedEvent module_health_changed = 14;
    
    // Single event indicating the orchestrator should
    // query the module for all its entities now.
    EntitiesUpdatedEvent entities_updated = 20;
  }
}

// Specific event types for module lifecycle
message ModuleStartedEvent {
  string module_version = 1;
  int32 startup_duration_ms = 2;
  string process_id = 4;
  int32 grpc_port = 5;
}

message ModuleStoppedEvent {
  string reason = 1;
  int32 shutdown_duration_ms = 2;
  bool was_graceful = 3;
  int32 exit_code = 4;
}

message ModuleErrorEvent {
  string error_code = 1;
  string error_message = 2;
  string stack_trace = 3;
  bool is_recoverable = 4;
  int32 retry_attempt = 5;
}

message ModuleConfiguredEvent {
  map<string, string> old_config = 1;
  map<string, string> new_config = 2;
  repeated string changed_keys = 3;
}

message ModuleHealthChangedEvent {
  call_assistant.common.HealthStatus old_health = 1;
  call_assistant.common.HealthStatus new_health = 2;
  string reason = 3;
}

message EntitiesUpdatedEvent {
  // This event is sent when the orchestrator should refresh
  // the entities from the module.
  string module_id = 1;
  optional string reason = 2; // e.g. "initial load", "configuration change"
}


// EventService is provided by the orchestrator for modules to report events
service EventService {
  // Modules call this to report events to the orchestrator
  rpc ReportEvent(ReportEventRequest) returns (ReportEventResponse);
  
  
  // Modules call this to report metrics
  rpc ReportMetrics(ReportMetricsRequest) returns (ReportMetricsResponse);
}

// Request/Response messages for EventService
message ReportEventRequest {
  Event event = 1;
}

message ReportEventResponse {
  bool success = 1;
  string error_message = 2;
}


message ReportMetricsRequest {
  call_assistant.common.Metrics metrics = 1;
}

message ReportMetricsResponse {
  bool success = 1;
  string error_message = 2;
}